{"remainingRequest":"/Users/Karl/Coding/app/page/attendee/node_modules/vue-mobile-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Karl/Coding/app/page/attendee/node_modules/vue-mobile-calendar/lib/inlineCalendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Karl/Coding/app/page/attendee/node_modules/vue-mobile-calendar/lib/inlineCalendar.vue","mtime":1562758090459},{"path":"/Users/Karl/Coding/app/page/attendee/node_modules/vue-mobile-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Karl/Coding/app/page/attendee/node_modules/vue-mobile-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Karl/Coding/app/page/attendee/node_modules/vue-mobile-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport './inlineCalendar.less';\r\nimport dayjs from 'dayjs';\r\nlet touchStartPosition;\r\nlet touchEndPosition;\r\nlet timeStamp;\r\n\r\nexport default {\r\n  name: 'inlineCalendar',\r\n  props: {\r\n    defaultDate: {\r\n      type: [Date, Number, Array, String, dayjs],\r\n    },\r\n    disabledDate: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    minDate: {\r\n      type: [Date, Number, Array, String, dayjs],\r\n    },\r\n    maxDate: {\r\n      type: [Date, Number, Array, String, dayjs],\r\n    },\r\n    mode: {\r\n      type: String,\r\n      default: 'single',\r\n    },\r\n    dayClick: {\r\n      type: Function,\r\n      default() {\r\n        return function() {\r\n          return true;\r\n        };\r\n      },\r\n    },\r\n    enableTouch: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    monthNames: {\r\n      type: Array,\r\n      default() {\r\n        return ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\r\n      },\r\n    },\r\n    weekNames: {\r\n      type: Array,\r\n      default() {\r\n        return ['周一', '周二', '周三', '周四', '周五', '周六', '周日'];\r\n      },\r\n    },\r\n    yearUnit:{\r\n      type: String,\r\n      default: '年'\r\n    },\r\n    btnClose:{\r\n      type: String,\r\n      default: '关闭'\r\n    },\r\n    btnToday:{\r\n      type: String,\r\n      default: '今天'\r\n    },\r\n    btnConfirm:{\r\n      type: String,\r\n      default: '确 认'\r\n    }\r\n  },\r\n  watch: {\r\n    mode() {\r\n      this.init();\r\n    },\r\n    selectDate(newValue){\r\n      if (newValue.length > 1) {\r\n        this.isDisabled = false\r\n      }\r\n      else {\r\n        this.isDisabled = true\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      fullDate: [[], [], []],\r\n      translateX: 0,\r\n      showDate: {\r\n        year: undefined,\r\n        month: undefined,\r\n      },\r\n      dateNow: {\r\n        year: dayjs().year(),\r\n        month: dayjs().month() + 1,\r\n        date: dayjs().date(),\r\n      },\r\n      selectDate: [],\r\n      touch: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      isTouching: false,\r\n      isDisabled: true\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.selectDate = [];\r\n      let { defaultDate, mode } = this;\r\n      let dateToShow = dayjs().startOf('month');\r\n      if (mode === 'single' && defaultDate) {\r\n        this.selectDate = dayjs(defaultDate).startOf('day');\r\n        dateToShow = this.selectDate.startOf('month');\r\n      }\r\n      if (mode === 'multiple' && Array.isArray(defaultDate)) {\r\n        if (defaultDate.length > 0) {\r\n          this.selectDate = defaultDate.map((item) => dayjs(item).startOf('day'));\r\n        }\r\n      }\r\n      if (mode === 'during' && Array.isArray(defaultDate)) {\r\n        if (defaultDate.length === 2) {\r\n          const startDate = dayjs(defaultDate[0]).startOf('day');\r\n          const endDate = dayjs(defaultDate[1]).startOf('day');\r\n          if (startDate.isBefore(endDate) || startDate.isSame(endDate)) {\r\n            this.selectDate = [startDate, endDate];\r\n          }\r\n        }\r\n      }\r\n      this.showDate = {\r\n        year: dateToShow.year(),\r\n        month: dateToShow.month() + 1,\r\n      };\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    touchstart(event) {\r\n      if (this.enableTouch) {\r\n        touchStartPosition = event.touches[0].clientX;\r\n        touchEndPosition = event.touches[0].clientY;\r\n        timeStamp = event.timeStamp;\r\n        this.touch = {\r\n          x: 0,\r\n          y: 0,\r\n        };\r\n        this.isTouching = true;\r\n      }\r\n    },\r\n    touchmove(event) {\r\n      if (this.enableTouch) {\r\n        this.touch = {\r\n          x: (event.touches[0].clientX - touchStartPosition) / this.$refs.calendar.offsetWidth,\r\n          y: (event.touches[0].clientY - touchEndPosition) / this.$refs.calendar.offsetHeight,\r\n        };\r\n      }\r\n    },\r\n    touchend(event) {\r\n      if (this.enableTouch) {\r\n        this.isTouching = false;\r\n        const during = dayjs(event.timeStamp).diff(timeStamp);\r\n        if (Math.abs(this.touch.x) > Math.abs(this.touch.y) && Math.abs(this.touch.x * this.$refs.calendar.offsetWidth) > 20) {\r\n          if (this.touch.x > 0) {\r\n            this.changeMonth('prev');\r\n          } else if (this.touch.x < 0) {\r\n            this.changeMonth('next');\r\n          }\r\n        } else {\r\n          this.touch = {\r\n            x: 0,\r\n            y: 0,\r\n          };\r\n        }\r\n      }\r\n    },\r\n    // 触发change事件\r\n    emitChange() {\r\n      this.$emit('change', this.selectDate);\r\n    },\r\n    // 触发切换年月事件\r\n    emitSwitch(showDate) {\r\n      this.$emit('switch', showDate);\r\n    },\r\n    // 日期点击事件\r\n    onDayClick(day) {\r\n      if (!this.dayClick(day.dateTime)) {\r\n        return;\r\n      }\r\n      switch (this.$props.mode) {\r\n      case 'single':\r\n        if (!day.isSelect && !day.isDisable) {\r\n          this.selectDate = day.dateTime;\r\n          this.getFullDate(this.showDate);\r\n          this.emitChange();\r\n        }\r\n        break;\r\n      case 'multiple':\r\n        if (!day.isSelect && !day.isDisable) {\r\n          this.selectDate.push(day.dateTime);\r\n          this.getFullDate(this.showDate);\r\n          this.emitChange();\r\n        } else {\r\n          if (this.selectDate.length > 1) {\r\n            this.selectDate = this.selectDate.filter((item) => !item.isSame(day.dateTime));\r\n            this.getFullDate(this.showDate);\r\n            this.emitChange();\r\n          }\r\n        }\r\n        break;\r\n      case 'during':\r\n        if (day.isDisable) return;\r\n        if (this.selectDate.length === 0) {\r\n          this.selectDate = [day.dateTime];\r\n        } else if (this.selectDate.length === 1) {\r\n          this.selectDate.push(day.dateTime);\r\n          if (this.selectDate[1].isBefore(this.selectDate[0])) {\r\n            this.selectDate.reverse();\r\n          }\r\n        } else if (this.selectDate.length === 2) {\r\n          this.selectDate = [day.dateTime];\r\n        }\r\n        this.getFullDate(this.showDate);\r\n        this.emitChange();\r\n        break;\r\n      }\r\n    },\r\n    // 切换年份\r\n    changeYear(action) {\r\n      const date = dayjs(`${this.showDate.year}-${this.showDate.month}`);\r\n      let computedDate;\r\n      switch (action) {\r\n      case 'prev':\r\n        this.translateX += 1;\r\n        computedDate = date.subtract(1, 'year');\r\n        break;\r\n      case 'next':\r\n        this.translateX -= 1;\r\n        computedDate = date.add(1, 'year');\r\n        break;\r\n      }\r\n      this.showDate = {\r\n        year: computedDate.year(),\r\n        month: computedDate.month() + 1,\r\n      };\r\n      this.emitSwitch(this.showDate);\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    // 切换月份\r\n    changeMonth(action) {\r\n      const date = dayjs(`${this.showDate.year}-${this.showDate.month}`);\r\n      let computedDate;\r\n      switch (action) {\r\n      case 'prev':\r\n        this.translateX += 1;\r\n        computedDate = date.subtract(1, 'month');\r\n        break;\r\n      case 'next':\r\n        this.translateX -= 1;\r\n        computedDate = date.add(1, 'month');\r\n        break;\r\n      }\r\n      this.showDate = {\r\n        year: computedDate.year(),\r\n        month: computedDate.month() + 1,\r\n      };\r\n      this.emitSwitch(this.showDate);\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    // 暴露出去的方法：切换当前显示的时间\r\n    changeDateView(date = dayjs()) {\r\n      const changeDate = dayjs(date);\r\n      this.showDate = {\r\n        year: changeDate.year(),\r\n        month: changeDate.month() + 1,\r\n      };\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    getFullDate() {\r\n      const date = dayjs(`${this.showDate.year}-${this.showDate.month}`);\r\n      const thisDate = this.getDate(date);\r\n      const prevDate = this.getDate(date.subtract(1, 'month'));\r\n      const nextDate = this.getDate(date.add(1, 'month'));\r\n      this.fullDate = [\r\n        prevDate.fullDate,\r\n        thisDate.fullDate,\r\n        nextDate.fullDate,\r\n      ];\r\n    },\r\n    // 当前日期是否被选中\r\n    isSelect(date) {\r\n      let select = false;\r\n      switch (this.$props.mode) {\r\n      case 'single':\r\n        if (this.selectDate && date.isSame(this.selectDate)) {\r\n          select = true;\r\n        }\r\n        break;\r\n      case 'multiple':\r\n        if (this.selectDate.length > 0 && this.selectDate.some((item) => date.isSame(item))) {\r\n          select = true;\r\n        }\r\n        break;\r\n      }\r\n      return select;\r\n    },\r\n    // 当前时间是否在selectDate之间\r\n    isBetting(date) {\r\n      if (this.mode === 'during') {\r\n        const startDate = this.selectDate[0];\r\n        const endDate = this.selectDate[1];\r\n        if (this.selectDate.length === 1) {\r\n          return date.isSame(startDate);\r\n        } else if (this.selectDate.length === 2) {\r\n          return (date.isAfter(startDate) && date.isBefore(endDate)) || date.isSame(startDate) || date.isSame(endDate);\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    getIsDisable(dateTime) {\r\n      let isDisable = false;\r\n      const disabledDate = this.disabledDate.map((item) => dayjs(item).startOf('day'));\r\n      if (this.minDate || this.maxDate) {\r\n        if (this.minDate) {\r\n          const minDate = dayjs(this.minDate).startOf('day');\r\n          isDisable = dateTime.isBefore(minDate);\r\n        }\r\n        if (!isDisable && this.maxDate) {\r\n          const maxDate = dayjs(this.maxDate).endOf('day');\r\n          isDisable = dateTime.isAfter(maxDate);\r\n        }\r\n      } else if (disabledDate.length > 0) {\r\n        if (this.mode !== 'during') {\r\n          isDisable = disabledDate.some((item) => item.isSame(dateTime));\r\n        }\r\n      }\r\n      return isDisable;\r\n    },\r\n    getDate(thisDate) {\r\n      let date = [];\r\n      const prevDate = thisDate.subtract(1, 'month');\r\n      const nextDate = thisDate.add(1, 'month');\r\n      const firstDayOfWeek = thisDate.day() || 7;\r\n      const dayCountOfThisMonth = thisDate.daysInMonth();\r\n      const dayCountOfPrevMonth = prevDate.daysInMonth();\r\n      const prevIndexOfThisMonth = firstDayOfWeek - 1;\r\n      const NextIndexOfThisMonth = firstDayOfWeek + dayCountOfThisMonth - 2;\r\n      const disabledDate = this.disabledDate.map((item) => dayjs(item).startOf('day'));\r\n      for (let i = 0; i < 7 * 6; i++) {\r\n        // 上月\r\n        if (i < prevIndexOfThisMonth) {\r\n          const value = dayCountOfPrevMonth - (firstDayOfWeek - i - 2);\r\n          const dateTime = prevDate.date(value);\r\n          date[i] = {\r\n            value,\r\n            dateTime,\r\n            isGrey: true,\r\n            isToday: dateTime.isSame(dayjs().startOf('day')),\r\n            isSelect: this.isSelect(dateTime),\r\n            isDisable: this.getIsDisable(dateTime),\r\n            isDuring: this.isBetting(dateTime),\r\n          };\r\n        }\r\n        // 当月\r\n        if (\r\n          i >= prevIndexOfThisMonth &&\r\n          i <= NextIndexOfThisMonth\r\n        ) {\r\n          const value = i - firstDayOfWeek + 2;\r\n          const dateTime = thisDate.date(value);\r\n          date[i] = {\r\n            value,\r\n            dateTime,\r\n            isGrey: false,\r\n            isToday: dateTime.isSame(dayjs().startOf('day')),\r\n            isSelect: this.isSelect(dateTime),\r\n            isDisable: this.getIsDisable(dateTime),\r\n            isDuring: this.isBetting(dateTime),\r\n          };\r\n        }\r\n        // 下月\r\n        if (i > NextIndexOfThisMonth) {\r\n          const value = i - firstDayOfWeek - dayCountOfThisMonth + 2;\r\n          const dateTime = nextDate.date(value);\r\n          date[i] = {\r\n            value,\r\n            dateTime,\r\n            isGrey: true,\r\n            isToday: dateTime.isSame(dayjs().startOf('day')),\r\n            isSelect: this.isSelect(dateTime),\r\n            isDisable: this.getIsDisable(dateTime),\r\n            isDuring: this.isBetting(dateTime),\r\n          };\r\n        }\r\n      }\r\n      const fullDate = [];\r\n      for (let i = 0; i < 6; i++) {\r\n        fullDate.push(date.slice(i * 7, (i + 1) * 7));\r\n      }\r\n      return {\r\n        fullDate,\r\n      }\r\n    },\r\n    onConfirm(){\r\n      this.$emit('onConfirm', this.selectDate)\r\n      this.reSetSelected()\r\n    },\r\n    onClose(){\r\n      console.log('this.fullDate: ', )\r\n      this.reSetSelected()\r\n      this.$emit('onClose')\r\n    },\r\n    /** \r\n     * @desc 恢复未选中状态（数据和样式）\r\n    */\r\n    reSetSelected(){\r\n      // 关闭时，回复选中状态为未选中（this.fullDate 数组第一级第二个元素是当前页的效果）\r\n      for (let a in this.fullDate) {\r\n        for (let i in this.fullDate[a]) {\r\n          for (let j in this.fullDate[a][i]) {\r\n            this.$set(this.fullDate[a][i][j],'isDuring', false)\r\n          }\r\n        }\r\n      }\r\n\r\n      this.selectDate = []\r\n    }\r\n  },\r\n};\r\n",{"version":3,"sources":["inlineCalendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"inlineCalendar.vue","sourceRoot":"lib","sourcesContent":["<template>\r\n  <div class=\"m-calendar\" ref=\"calendar\">\r\n    <div class=\"m-go-today\">\r\n      <span @click=\"onClose\">{{btnClose}}</span>\r\n      <div class=\"m-go-today_btn\" @click=\"changeDateView(new Date())\">{{btnToday}}</div>\r\n    </div>\r\n    <div class=\"m-toolbar\">\r\n      <div class=\"m-year-selector\">\r\n        <a class=\"m-prev-btn\" @click=\"changeYear('prev')\"></a>\r\n        <span>{{showDate.year}} {{yearUnit}}</span>\r\n        <a class=\"m-next-btn\" @click=\"changeYear('next')\"></a>\r\n      </div>\r\n      <div class=\"m-month-selector\">\r\n        <a class=\"m-prev-btn\" @click=\"changeMonth('prev')\"></a>\r\n        <span>{{monthNames[showDate.month-1]}}</span>\r\n        <a class=\"m-next-btn\" @click=\"changeMonth('next')\"></a>\r\n      </div>\r\n    </div>\r\n    <div class=\"m-week-header\">\r\n      <div\r\n        class=\"m-week-day\"\r\n        v-for=\"item in weekNames\"\r\n        :key=\"item\"\r\n      >\r\n        {{item}}\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"m-months-container\"\r\n      @touchstart=\"touchstart\"\r\n      @touchmove=\"touchmove\"\r\n      @touchend=\"touchend\"\r\n    >\r\n      <div\r\n        class=\"m-months-wrapper\"\r\n        :style=\"{'transform': `translate3d(${-translateX*100}%, 0, 0)`}\"\r\n      >\r\n        <div\r\n          class=\"m-months\"\r\n          v-for=\"(month,monthIndex) in fullDate\"\r\n          :key=\"monthIndex\"\r\n          :style=\"{\r\n            transform: `translate3d(${(monthIndex-1+translateX + (isTouching ? touch.x : 0))*100}%, 0, 0)`,\r\n            transitionDuration: isTouching ? '0s' : '.3s',\r\n          }\"\r\n        >\r\n          <div\r\n            class=\"m-row\"\r\n            v-for=\"(week,weekIndex) in month\"\r\n            :key=\"weekIndex\"\r\n          >\r\n            <div\r\n              class=\"m-day\"\r\n              v-for=\"(day,dayIndex) in week\"\r\n              :key=\"dayIndex\"\r\n              @click=\"onDayClick(day)\"\r\n            >\r\n              <span\r\n                v-if=\"day.isToday\"\r\n                :class=\"{\r\n                  'm-day-num':true,\r\n                  'm-grey': day.isGrey,\r\n                  'm-today': day.isToday,\r\n                  'm-disable': day.isDisable,\r\n                  'm-select': day.isSelect,\r\n                  'm-during': day.isDuring\r\n                }\"\r\n              >\r\n                今天\r\n              </span>\r\n              <span\r\n                v-else\r\n                :class=\"{\r\n                  'm-day-num':true,\r\n                  'm-grey': day.isGrey,\r\n                  'm-today': day.isToday,\r\n                  'm-disable': day.isDisable,\r\n                  'm-select': day.isSelect,\r\n                  'm-during': day.isDuring\r\n                }\"\r\n              >\r\n                {{day.value}}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"m-popover_confirm\">\r\n      <button @click=\"onConfirm\" :disabled=\"isDisabled\">{{btnConfirm}}</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './inlineCalendar.less';\r\nimport dayjs from 'dayjs';\r\nlet touchStartPosition;\r\nlet touchEndPosition;\r\nlet timeStamp;\r\n\r\nexport default {\r\n  name: 'inlineCalendar',\r\n  props: {\r\n    defaultDate: {\r\n      type: [Date, Number, Array, String, dayjs],\r\n    },\r\n    disabledDate: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    minDate: {\r\n      type: [Date, Number, Array, String, dayjs],\r\n    },\r\n    maxDate: {\r\n      type: [Date, Number, Array, String, dayjs],\r\n    },\r\n    mode: {\r\n      type: String,\r\n      default: 'single',\r\n    },\r\n    dayClick: {\r\n      type: Function,\r\n      default() {\r\n        return function() {\r\n          return true;\r\n        };\r\n      },\r\n    },\r\n    enableTouch: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    monthNames: {\r\n      type: Array,\r\n      default() {\r\n        return ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\r\n      },\r\n    },\r\n    weekNames: {\r\n      type: Array,\r\n      default() {\r\n        return ['周一', '周二', '周三', '周四', '周五', '周六', '周日'];\r\n      },\r\n    },\r\n    yearUnit:{\r\n      type: String,\r\n      default: '年'\r\n    },\r\n    btnClose:{\r\n      type: String,\r\n      default: '关闭'\r\n    },\r\n    btnToday:{\r\n      type: String,\r\n      default: '今天'\r\n    },\r\n    btnConfirm:{\r\n      type: String,\r\n      default: '确 认'\r\n    }\r\n  },\r\n  watch: {\r\n    mode() {\r\n      this.init();\r\n    },\r\n    selectDate(newValue){\r\n      if (newValue.length > 1) {\r\n        this.isDisabled = false\r\n      }\r\n      else {\r\n        this.isDisabled = true\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      fullDate: [[], [], []],\r\n      translateX: 0,\r\n      showDate: {\r\n        year: undefined,\r\n        month: undefined,\r\n      },\r\n      dateNow: {\r\n        year: dayjs().year(),\r\n        month: dayjs().month() + 1,\r\n        date: dayjs().date(),\r\n      },\r\n      selectDate: [],\r\n      touch: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      isTouching: false,\r\n      isDisabled: true\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.selectDate = [];\r\n      let { defaultDate, mode } = this;\r\n      let dateToShow = dayjs().startOf('month');\r\n      if (mode === 'single' && defaultDate) {\r\n        this.selectDate = dayjs(defaultDate).startOf('day');\r\n        dateToShow = this.selectDate.startOf('month');\r\n      }\r\n      if (mode === 'multiple' && Array.isArray(defaultDate)) {\r\n        if (defaultDate.length > 0) {\r\n          this.selectDate = defaultDate.map((item) => dayjs(item).startOf('day'));\r\n        }\r\n      }\r\n      if (mode === 'during' && Array.isArray(defaultDate)) {\r\n        if (defaultDate.length === 2) {\r\n          const startDate = dayjs(defaultDate[0]).startOf('day');\r\n          const endDate = dayjs(defaultDate[1]).startOf('day');\r\n          if (startDate.isBefore(endDate) || startDate.isSame(endDate)) {\r\n            this.selectDate = [startDate, endDate];\r\n          }\r\n        }\r\n      }\r\n      this.showDate = {\r\n        year: dateToShow.year(),\r\n        month: dateToShow.month() + 1,\r\n      };\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    touchstart(event) {\r\n      if (this.enableTouch) {\r\n        touchStartPosition = event.touches[0].clientX;\r\n        touchEndPosition = event.touches[0].clientY;\r\n        timeStamp = event.timeStamp;\r\n        this.touch = {\r\n          x: 0,\r\n          y: 0,\r\n        };\r\n        this.isTouching = true;\r\n      }\r\n    },\r\n    touchmove(event) {\r\n      if (this.enableTouch) {\r\n        this.touch = {\r\n          x: (event.touches[0].clientX - touchStartPosition) / this.$refs.calendar.offsetWidth,\r\n          y: (event.touches[0].clientY - touchEndPosition) / this.$refs.calendar.offsetHeight,\r\n        };\r\n      }\r\n    },\r\n    touchend(event) {\r\n      if (this.enableTouch) {\r\n        this.isTouching = false;\r\n        const during = dayjs(event.timeStamp).diff(timeStamp);\r\n        if (Math.abs(this.touch.x) > Math.abs(this.touch.y) && Math.abs(this.touch.x * this.$refs.calendar.offsetWidth) > 20) {\r\n          if (this.touch.x > 0) {\r\n            this.changeMonth('prev');\r\n          } else if (this.touch.x < 0) {\r\n            this.changeMonth('next');\r\n          }\r\n        } else {\r\n          this.touch = {\r\n            x: 0,\r\n            y: 0,\r\n          };\r\n        }\r\n      }\r\n    },\r\n    // 触发change事件\r\n    emitChange() {\r\n      this.$emit('change', this.selectDate);\r\n    },\r\n    // 触发切换年月事件\r\n    emitSwitch(showDate) {\r\n      this.$emit('switch', showDate);\r\n    },\r\n    // 日期点击事件\r\n    onDayClick(day) {\r\n      if (!this.dayClick(day.dateTime)) {\r\n        return;\r\n      }\r\n      switch (this.$props.mode) {\r\n      case 'single':\r\n        if (!day.isSelect && !day.isDisable) {\r\n          this.selectDate = day.dateTime;\r\n          this.getFullDate(this.showDate);\r\n          this.emitChange();\r\n        }\r\n        break;\r\n      case 'multiple':\r\n        if (!day.isSelect && !day.isDisable) {\r\n          this.selectDate.push(day.dateTime);\r\n          this.getFullDate(this.showDate);\r\n          this.emitChange();\r\n        } else {\r\n          if (this.selectDate.length > 1) {\r\n            this.selectDate = this.selectDate.filter((item) => !item.isSame(day.dateTime));\r\n            this.getFullDate(this.showDate);\r\n            this.emitChange();\r\n          }\r\n        }\r\n        break;\r\n      case 'during':\r\n        if (day.isDisable) return;\r\n        if (this.selectDate.length === 0) {\r\n          this.selectDate = [day.dateTime];\r\n        } else if (this.selectDate.length === 1) {\r\n          this.selectDate.push(day.dateTime);\r\n          if (this.selectDate[1].isBefore(this.selectDate[0])) {\r\n            this.selectDate.reverse();\r\n          }\r\n        } else if (this.selectDate.length === 2) {\r\n          this.selectDate = [day.dateTime];\r\n        }\r\n        this.getFullDate(this.showDate);\r\n        this.emitChange();\r\n        break;\r\n      }\r\n    },\r\n    // 切换年份\r\n    changeYear(action) {\r\n      const date = dayjs(`${this.showDate.year}-${this.showDate.month}`);\r\n      let computedDate;\r\n      switch (action) {\r\n      case 'prev':\r\n        this.translateX += 1;\r\n        computedDate = date.subtract(1, 'year');\r\n        break;\r\n      case 'next':\r\n        this.translateX -= 1;\r\n        computedDate = date.add(1, 'year');\r\n        break;\r\n      }\r\n      this.showDate = {\r\n        year: computedDate.year(),\r\n        month: computedDate.month() + 1,\r\n      };\r\n      this.emitSwitch(this.showDate);\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    // 切换月份\r\n    changeMonth(action) {\r\n      const date = dayjs(`${this.showDate.year}-${this.showDate.month}`);\r\n      let computedDate;\r\n      switch (action) {\r\n      case 'prev':\r\n        this.translateX += 1;\r\n        computedDate = date.subtract(1, 'month');\r\n        break;\r\n      case 'next':\r\n        this.translateX -= 1;\r\n        computedDate = date.add(1, 'month');\r\n        break;\r\n      }\r\n      this.showDate = {\r\n        year: computedDate.year(),\r\n        month: computedDate.month() + 1,\r\n      };\r\n      this.emitSwitch(this.showDate);\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    // 暴露出去的方法：切换当前显示的时间\r\n    changeDateView(date = dayjs()) {\r\n      const changeDate = dayjs(date);\r\n      this.showDate = {\r\n        year: changeDate.year(),\r\n        month: changeDate.month() + 1,\r\n      };\r\n      this.getFullDate(this.showDate);\r\n    },\r\n    getFullDate() {\r\n      const date = dayjs(`${this.showDate.year}-${this.showDate.month}`);\r\n      const thisDate = this.getDate(date);\r\n      const prevDate = this.getDate(date.subtract(1, 'month'));\r\n      const nextDate = this.getDate(date.add(1, 'month'));\r\n      this.fullDate = [\r\n        prevDate.fullDate,\r\n        thisDate.fullDate,\r\n        nextDate.fullDate,\r\n      ];\r\n    },\r\n    // 当前日期是否被选中\r\n    isSelect(date) {\r\n      let select = false;\r\n      switch (this.$props.mode) {\r\n      case 'single':\r\n        if (this.selectDate && date.isSame(this.selectDate)) {\r\n          select = true;\r\n        }\r\n        break;\r\n      case 'multiple':\r\n        if (this.selectDate.length > 0 && this.selectDate.some((item) => date.isSame(item))) {\r\n          select = true;\r\n        }\r\n        break;\r\n      }\r\n      return select;\r\n    },\r\n    // 当前时间是否在selectDate之间\r\n    isBetting(date) {\r\n      if (this.mode === 'during') {\r\n        const startDate = this.selectDate[0];\r\n        const endDate = this.selectDate[1];\r\n        if (this.selectDate.length === 1) {\r\n          return date.isSame(startDate);\r\n        } else if (this.selectDate.length === 2) {\r\n          return (date.isAfter(startDate) && date.isBefore(endDate)) || date.isSame(startDate) || date.isSame(endDate);\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    getIsDisable(dateTime) {\r\n      let isDisable = false;\r\n      const disabledDate = this.disabledDate.map((item) => dayjs(item).startOf('day'));\r\n      if (this.minDate || this.maxDate) {\r\n        if (this.minDate) {\r\n          const minDate = dayjs(this.minDate).startOf('day');\r\n          isDisable = dateTime.isBefore(minDate);\r\n        }\r\n        if (!isDisable && this.maxDate) {\r\n          const maxDate = dayjs(this.maxDate).endOf('day');\r\n          isDisable = dateTime.isAfter(maxDate);\r\n        }\r\n      } else if (disabledDate.length > 0) {\r\n        if (this.mode !== 'during') {\r\n          isDisable = disabledDate.some((item) => item.isSame(dateTime));\r\n        }\r\n      }\r\n      return isDisable;\r\n    },\r\n    getDate(thisDate) {\r\n      let date = [];\r\n      const prevDate = thisDate.subtract(1, 'month');\r\n      const nextDate = thisDate.add(1, 'month');\r\n      const firstDayOfWeek = thisDate.day() || 7;\r\n      const dayCountOfThisMonth = thisDate.daysInMonth();\r\n      const dayCountOfPrevMonth = prevDate.daysInMonth();\r\n      const prevIndexOfThisMonth = firstDayOfWeek - 1;\r\n      const NextIndexOfThisMonth = firstDayOfWeek + dayCountOfThisMonth - 2;\r\n      const disabledDate = this.disabledDate.map((item) => dayjs(item).startOf('day'));\r\n      for (let i = 0; i < 7 * 6; i++) {\r\n        // 上月\r\n        if (i < prevIndexOfThisMonth) {\r\n          const value = dayCountOfPrevMonth - (firstDayOfWeek - i - 2);\r\n          const dateTime = prevDate.date(value);\r\n          date[i] = {\r\n            value,\r\n            dateTime,\r\n            isGrey: true,\r\n            isToday: dateTime.isSame(dayjs().startOf('day')),\r\n            isSelect: this.isSelect(dateTime),\r\n            isDisable: this.getIsDisable(dateTime),\r\n            isDuring: this.isBetting(dateTime),\r\n          };\r\n        }\r\n        // 当月\r\n        if (\r\n          i >= prevIndexOfThisMonth &&\r\n          i <= NextIndexOfThisMonth\r\n        ) {\r\n          const value = i - firstDayOfWeek + 2;\r\n          const dateTime = thisDate.date(value);\r\n          date[i] = {\r\n            value,\r\n            dateTime,\r\n            isGrey: false,\r\n            isToday: dateTime.isSame(dayjs().startOf('day')),\r\n            isSelect: this.isSelect(dateTime),\r\n            isDisable: this.getIsDisable(dateTime),\r\n            isDuring: this.isBetting(dateTime),\r\n          };\r\n        }\r\n        // 下月\r\n        if (i > NextIndexOfThisMonth) {\r\n          const value = i - firstDayOfWeek - dayCountOfThisMonth + 2;\r\n          const dateTime = nextDate.date(value);\r\n          date[i] = {\r\n            value,\r\n            dateTime,\r\n            isGrey: true,\r\n            isToday: dateTime.isSame(dayjs().startOf('day')),\r\n            isSelect: this.isSelect(dateTime),\r\n            isDisable: this.getIsDisable(dateTime),\r\n            isDuring: this.isBetting(dateTime),\r\n          };\r\n        }\r\n      }\r\n      const fullDate = [];\r\n      for (let i = 0; i < 6; i++) {\r\n        fullDate.push(date.slice(i * 7, (i + 1) * 7));\r\n      }\r\n      return {\r\n        fullDate,\r\n      }\r\n    },\r\n    onConfirm(){\r\n      this.$emit('onConfirm', this.selectDate)\r\n      this.reSetSelected()\r\n    },\r\n    onClose(){\r\n      console.log('this.fullDate: ', )\r\n      this.reSetSelected()\r\n      this.$emit('onClose')\r\n    },\r\n    /** \r\n     * @desc 恢复未选中状态（数据和样式）\r\n    */\r\n    reSetSelected(){\r\n      // 关闭时，回复选中状态为未选中（this.fullDate 数组第一级第二个元素是当前页的效果）\r\n      for (let a in this.fullDate) {\r\n        for (let i in this.fullDate[a]) {\r\n          for (let j in this.fullDate[a][i]) {\r\n            this.$set(this.fullDate[a][i][j],'isDuring', false)\r\n          }\r\n        }\r\n      }\r\n\r\n      this.selectDate = []\r\n    }\r\n  },\r\n};\r\n</script>\r\n"]}]}